#!/bin/sh

# Usage function
function usage() {
  cat >&2 <<EOF
${SH_FILE} is used to convert official U-Boot generated binary into a usable bootloader for Amlogic GXL/GXM SoC

Usage: ${SH_FILE} [a-] -b board [-c] [-h] [-n] [-o] [-s] -u dir[:branch]

Where:
  -a    use official ARM ATF fimrware
  -b	name of the board to configure (for example: kvim)
  -c	copy the binary blob files in the current directory
  -g    use gxlimg to generate image instead of aml_encrypt_gxl
  -h	this help page
  -n    don't compile Amlogic U-Boot (use pre-compiled binary blob)
  -o    don't copy the bl33.bin from official U-Boot
  -s	"burn" the generated U-Boot file on a sdcard
  -u	U-Boot Amlogic version source directory / pre-compiled binary blob directory
EOF
  exit 0
}

# Error function
function error() {
  echo -e "$@" >&2
  exit 1
}

# Copy/Check function
function copy() {
  typeset -r FILE=$1
  typeset -r DEST=$2

  cp ${FILE} ${DEST} >/dev/null 2>&1 \
    || error "Error while copying file ${FILE} to ${DEST}!"
}

# Variable(s)
typeset -r SH_FILE=${0##*/}
typeset -r U_BOOT_DIR=/dev/shm/u-boot-tmp
typeset -r TMPFS=/dev/shm/u-boot-amlogic-tmp
typeset -r FIPDIR=${U_BOOT_DIR}/fip
typeset -r BLOB_FIPDIR=${TMPFS}/fip
typeset -r AML_ENCRYPT_BIN=${TMPFS}/fip/gxl/aml_encrypt_gxl
typeset -r GXLIMG_BIN=gxlimg
typeset -i ATF_FW=0
typeset -i BURN=0
typeset -i COPY_UBOOT_BL33=1
typeset -i COPY_FW=0
typeset -i USE_GXLIMG=0
typeset -i COMPILE_AMLOGIC=1
typeset -l BURN_FILE=u-boot.bin.sd.bin
typeset AMLOGIC_U_BOOT_DIR BRANCH BOARD DEV

# Get options
while getopts "ab:cghnosu:" ARG; do
  case ${ARG} in
    a) ATF_FW=1
       ;;
    b) BOARD=${OPTARG}
       ;;
    c) COPY_FW=1
       ;;
    g) USE_GXLIMG=1
       BURN_FILE=u-boot.bin
       ;;
    n) COMPILE_AMLOGIC=0
       ;;
    o) COPY_UBOOT_BL33=0
       ;;
    s) BURN=1
       DEV=/dev/mmcblk0
       ;;
    u) AMLOGIC_U_BOOT_DIR=${OPTARG%:*}
       BRANCH=${OPTARG#*:}
       ;;
    h|*) usage
       ;;
  esac
done
shift $((OPTIND-1))

# Board model must be filled!
[[ -z "${BOARD}" ]] \
  && error "Board model must be filled!"

# Amlogic U-Boot directory must be filled!
[[ -z "${AMLOGIC_U_BOOT_DIR}" ]] \
  && error "Amlogic U-Boot directory must be filled!"

# Informative message
(( USE_GXLIMG ))            \
  && echo "- Using gxlimg!" \
  || echo "- Using aml_encrypt_gxl :-("

# Export needed variables
export ARCH=arm
export CROSS_COMPILE=aarch64-none-elf-
export CROSS_COMPILE_T32=arm-none-eabi-
export PATH=~/cross-compile/aarch64/gcc-linaro-aarch64-none-elf-4.8-2013.11_linux/bin:~/cross-compile/aarch64/gcc-arm-none-eabi-6-2017-q2-update/bin:$PATH

# Remove old TMPFS and re-create it
echo "- Cleaning/Creating ${TMPFS} directory..."
rm -rf ${TMPFS} \
  || error "Cannot clean temporary directory ${TMPFS}!"
mkdir -p ${TMPFS} \
  || error "Cannot create temporary directory ${TMPFS}!"

# Copy u-boot source in the tmpfs directory
#rsync -aq --exclude=.git ${AMLOGIC_U_BOOT_DIR}/ ${TMPFS} \
rsync -aq ${AMLOGIC_U_BOOT_DIR}/ ${TMPFS} \
  || error "Cannot copy ${AMLOGIC_U_BOOT_DIR}/* in ${TMPFS}!"

if (( COMPILE_AMLOGIC )); then
  # Go to temp U-Boot dir
  cd ${TMPFS}

  # Select the correct branch if needed
  if [[ -n "${BRANCH}" ]]; then
    echo "- Select branch '${BRANCH}' for Amlogic U-Boot..."
    git checkout ${BRANCH} || error "Failed to select branch!"
  fi

  echo "- Cleaning/Creating Amlogic U-Boot build directory..."
  make clean && make mrproper && make distclean

  # Configure Amlogic U-Boot
  echo "- Configure Amlogic U-Boot for ${BOARD} board..."
  make ${BOARD}_defconfig

  # Compile Amlogic U-Boot
  echo "- Compiling Amlogic U-Boot..."
  make || error "Failed to compile Amlogic U-Boot!"

  # We need to go back into original directory
  cd ${OLDPWD}
fi

# Remove old FIPDIR and re-create it
echo "- Cleaning/Creating ${FIPDIR} directory..."
rm -rf ${FIPDIR} \
  || error "Cannot clean FIP directory ${FIPDIR}!"
mkdir -p ${FIPDIR} \
  || error "Cannot create FIP directory ${FIPDIR}!"

# Copy compiled u-boot.bin as BL3-3
echo "- Copying BL3-3 file..."
(( COPY_UBOOT_BL33 ))                                 \
  && copy ${U_BOOT_DIR}/u-boot.bin ${FIPDIR}/bl33.bin \
  || copy ${BLOB_FIPDIR}/gxl/bl33.bin ${FIPDIR}/bl33.bin

# Copy needed binary blob files
echo "- Copying binary blob files..."
copy ${BLOB_FIPDIR}/gxl/bl2.bin ${FIPDIR}
copy ${BLOB_FIPDIR}/gxl/acs.bin ${FIPDIR}
copy ${BLOB_FIPDIR}/gxl/bl21.bin ${FIPDIR}
copy ${BLOB_FIPDIR}/gxl/bl30.bin ${FIPDIR}
copy ${BLOB_FIPDIR}/gxl/bl301.bin ${FIPDIR}
if (( ATF_FW )); then
  echo "- Using ATF BL31..."
  copy atf-bl31.bin ${FIPDIR}/bl31.img \
    || error "Error while copying ATF firmware!"
else
  echo "- Using Amlogic BL31..."
  copy ${BLOB_FIPDIR}/gxl/bl31.img ${FIPDIR}
fi

# Create BL3-0
echo "- Creating BL3-0..."
${BLOB_FIPDIR}/blx_fix.sh  \
  ${FIPDIR}/bl30.bin       \
  zero_tmp                 \
  ${FIPDIR}/bl30_zero.bin  \
  ${FIPDIR}/bl301.bin      \
  ${FIPDIR}/bl301_zero.bin \
  ${FIPDIR}/bl30_new.bin   \
  bl30

# Create BL2-ACS file
echo "- Creating BL2-ACS file..."
python ${BLOB_FIPDIR}/acs_tool.pyc ${FIPDIR}/bl2.bin ${FIPDIR}/bl2_acs.bin ${FIPDIR}/acs.bin 0

# Create BL2 file
echo "- Creating BL2 file..."
${BLOB_FIPDIR}/blx_fix.sh  \
  ${FIPDIR}/bl2_acs.bin    \
  zero_tmp                 \
  ${FIPDIR}/bl2_zero.bin   \
  ${FIPDIR}/bl21.bin       \
  ${FIPDIR}/bl21_zero.bin  \
  ${FIPDIR}/bl2_new.bin    \
  bl2

# Encode BL files
echo "- Encrypting BL* files..."
if (( USE_GXLIMG )); then
  ${GXLIMG_BIN} -t bl2 -s ${FIPDIR}/bl2_new.bin ${FIPDIR}/bl2_new.bin.sig
  ${GXLIMG_BIN} -t bl3x -c ${FIPDIR}/bl30_new.bin ${FIPDIR}/bl30_new.bin.enc
  ${GXLIMG_BIN} -t bl3x -c ${FIPDIR}/bl31.img ${FIPDIR}/bl31.img.enc
  ${GXLIMG_BIN} -t bl3x -c ${FIPDIR}/bl33.bin ${FIPDIR}/bl33.bin.enc
else
  ${AML_ENCRYPT_BIN} --bl2sig --input ${FIPDIR}/bl2_new.bin
  ${AML_ENCRYPT_BIN} --bl3enc --input ${FIPDIR}/bl30_new.bin
  ${AML_ENCRYPT_BIN} --bl3enc --input ${FIPDIR}/bl31.img
  ${AML_ENCRYPT_BIN} --bl3enc --input ${FIPDIR}/bl33.bin
fi

# Create u-boot.* files
echo "- Creating final u-boot.bin files..."
if (( USE_GXLIMG )); then
  ${GXLIMG_BIN} -t fip                \
    --bl2 ${FIPDIR}/bl2_new.bin.sig   \
    --bl30 ${FIPDIR}/bl30_new.bin.enc \
    --bl31 ${FIPDIR}/bl31.img.enc     \
    --bl33 ${FIPDIR}/bl33.bin.enc     \
    ${FIPDIR}/u-boot.bin
else
  ${AML_ENCRYPT_BIN}                  \
    --bootmk                          \
    --output ${FIPDIR}/u-boot.bin     \
    --bl2 ${FIPDIR}/bl2_new.bin.sig   \
    --bl30 ${FIPDIR}/bl30_new.bin.enc \
    --bl31 ${FIPDIR}/bl31.img.enc     \
    --bl33 ${FIPDIR}/bl33.bin.enc
fi

# Copy U-Boot files in the current directory
if (( COPY_FW )); then
  for FILE in ${FIPDIR}/bl33.bin ${FIPDIR}/u-boot.*; do
    echo "- Copy firmware file ${FILE##*/}..."
    copy ${FILE} ${PWD}
  done
fi

# Write U-Boot to sd-card
if (( BURN )); then
  echo "- Burning ${BURN_FILE}..."
  if (( USE_GXLIMG )); then
    dd if=${FIPDIR}/${BURN_FILE} of=${DEV} conv=fsync,notrunc bs=512 seek=1
    dd if=/dev/zero of=${DEV} conv=fsync,notrunc bs=1 count=444
  else
    dd if=${FIPDIR}/${BURN_FILE} of=${DEV} conv=fsync,notrunc bs=512 skip=1 seek=1
    dd if=${FIPDIR}/${BURN_FILE} of=${DEV} conv=fsync,notrunc bs=1 count=444
  fi
  sync ${DEV}
fi

# Clean exit
exit 0
