#!/bin/sh

# Usage function
function usage() {
  cat >&2 <<EOF
${SH_FILE} is used to compile, generate and burn official U-Boot for Amlogic GXL/GXM SoC

Usage: ${SH_FILE} [a-] -b board [-g] [-h] [-n]

Where:
  -a    use official ARM ATF fimrware
  -b    name of the board to configure
  -g    use gxlimg to generate image instead of aml_encrypt_gxl
  -h    this help page
  -n    don't compile Amlogic U-Boot (use pre-compiled binary blob)

Currently supported Amlogic boards are: khadas-vim, khadas-vim2, libretech-cc and libretech-ac
EOF
  exit 0
}

# Error function
function error() {
  echo -e "$@" >&2
  exit 1
}

# Variable(s)
typeset -r SH_FILE=${0##*/}
typeset -i ATF_FW=0
typeset -i USE_GXLIMG=0
typeset -i COMPILE_AMLOGIC=1
typeset GENERATE_OPTS="-c -s"
typeset AMLOGIC_U_BOOT_DIR
typeset AMLOGIC_U_BOOT_BOARD
typeset ATF_FW_BOARD
typeset BOARD

# Get options
while getopts "ab:ghn" ARG; do
  case ${ARG} in
    a) ATF_FW=1
       GENERATE_OPTS+=" -a"
       ;;
    b) BOARD=${OPTARG}
       ;;
    g) USE_GXLIMG=1
       GENERATE_OPTS+=" -g"
       ;;
    n) COMPILE_AMLOGIC=0
       GENERATE_OPTS+=" -n"
       ;;
    h|*) usage
       ;;
  esac
done
shift $((OPTIND-1))

# Board model must be filled!
[[ -z "${BOARD}" ]] \
  && error "Board model must be filled!"

case ${BOARD} in
  khadas-vim)
    (( COMPILE_AMLOGIC ))                                \
      && AMLOGIC_U_BOOT_DIR=~/git/github/u-boot-amlogic: \
      || AMLOGIC_U_BOOT_DIR=~/firmware/amlogic-binary-blob/vim1
    AMLOGIC_U_BOOT_BOARD="kvim"
    ATF_FW_BOARD="gxl"
    ;;
  khadas-vim2)
    (( COMPILE_AMLOGIC ))                                \
      && AMLOGIC_U_BOOT_DIR=~/git/github/u-boot-amlogic: \
      || AMLOGIC_U_BOOT_DIR=~/firmware/amlogic-binary-blob/vim2
    AMLOGIC_U_BOOT_BOARD="kvim2"
    ATF_FW_BOARD="gxm"
    ;;
  libretech-ac|libretech-cc)
    (( COMPILE_AMLOGIC ))                                         \
      && AMLOGIC_U_BOOT_DIR=~/git/github/u-boot-baylibre:${BOARD} \
      || AMLOGIC_U_BOOT_DIR=~/firmware/amlogic-binary-blob/${BOARD}
    AMLOGIC_U_BOOT_BOARD=${BOARD//-/_}
    ATF_FW_BOARD="gxl"
    ;;
esac

# Compile official ARM Trusted Firmware if needed
(( ATF_FW )) && compile_mainline_atf -b ${ATF_FW_BOARD}

# Compile official U-Boot for Amlogic based board and burn it on /dev/mmcblk0
compile_mainline_u-boot -a arm64 -b ${BOARD} \
  && generate_gxl_gxm_bootloader -u ${AMLOGIC_U_BOOT_DIR} -b ${AMLOGIC_U_BOOT_BOARD} ${GENERATE_OPTS}

exit $?
